[project]
name = "maas-server"
version = "0.1.0"
description = "Multi-as-a-Service Platform Backend"
authors = [{name = "MAAS Team", email = "team@maas.com"}]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
keywords = ["maas", "fastapi", "machine-learning", "ai", "microservice"]

dependencies = [
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.34.0",
    "sqlalchemy>=2.0.36",
    "alembic>=1.14.0",
    "psycopg2-binary>=2.9.10",
    "redis>=5.2.0",
    "pydantic[email]>=2.10.2",
    "pydantic-settings>=2.7.1",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.12",
    "httpx>=0.28.1",
    "celery>=5.4.0",
    "pymilvus>=2.5.2",
    "loguru>=0.7.3",
    "asyncpg>=0.30.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.4",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "black>=24.10.0",
    "ruff>=0.4.0",
    "mypy>=1.13.0",
    "pre-commit>=4.0.1",
    "types-redis>=4.6.0",
    "types-passlib>=1.7.7",
    "httpx>=0.28.1",
]

[project.scripts]
maas-server = "src.main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Hatch构建配置
[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.version]
path = "src/__init__.py"

[tool.hatch.envs.default]
dependencies = [
    "pytest>=8.3.4",
    "pytest-asyncio>=0.24.0", 
    "pytest-cov>=6.0.0",
    "black>=24.10.0",
    "ruff>=0.4.0",
    "mypy>=1.13.0",
    "pre-commit>=4.0.1",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov {args:tests}"
cov-report = [
    "- coverage combine",
    "coverage report",
]
cov-html = "coverage html"
lint = "ruff check {args:src tests}"
format = "ruff format {args:src tests}"
format-check = "ruff format --check {args:src tests}"
type-check = "mypy {args:src tests}"
all = [
    "format",
    "lint", 
    "type-check",
    "test-cov",
]

[tool.hatch.envs.test]
template = "default"

[[tool.hatch.envs.test.matrix]]
python = ["3.11", "3.12"]

# Ruff配置 - 现代化的Python代码检查工具
[tool.ruff]
line-length = 88
target-version = "py311"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q",  # flake8-quotes
    "PL", # pylint
    "PT", # flake8-pytest-style
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "PLR0913", # too many arguments to function call
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["PLR2004", "S101", "TID252"]
"src/*/migrations/*" = ["ALL"]

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

# Black配置 - 代码格式化
[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy配置 - 类型检查
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Pytest配置
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
addopts = "--cov=src --cov-report=term-missing --cov-report=html --cov-report=xml"
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage配置
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# UV工具配置
[tool.uv]
dev-dependencies = [
    "pytest>=8.3.4",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "black>=24.10.0",
    "ruff>=0.4.0",
    "mypy>=1.13.0",
    "pre-commit>=4.0.1",
    "types-redis>=4.6.0",
    "types-passlib>=1.7.7",
    "httpx>=0.28.1",
]
